{% extends 'base.html.twig' %}

{% block title %}3eos - Ench√®res caritatives{% endblock %}

{% block body %}
    <div id="auction-config"
         data-mercure-url="{{ mercureUrl }}"
         style="display: none;">
    </div>
    <!-- Hero Section -->
    <section class=" lg:min-h-screen pt-32 royal-gradient">
        <div class="container mx-auto px-4">
            <div class="max-w-3xl pt-12">
                    <span class="inline-block golden-gradient text-[#1D365B] text-sm font-medium px-6 py-2 rounded-full mb-8">
                        Ench√®res caritatives
                    </span>
                <h2 class="text-6xl font-bold mb-8 leading-tight text-white">
                    Des moments d'exception
                    <br>
                    <span class="golden-text">pour changer des vies</span>
                </h2>
                <p class="text-xl mb-12 leading-relaxed text-white opacity-90">
                    Participez √† des exp√©riences uniques avec des personnalit√©s inspirantes. Ensemble, construisons le Loft du C≈ìur, un espace d√©di√© √† la r√©insertion sociale et √† l'entraide pour les plus d√©munis
                </p>
                <div class="flex space-x-6">
                    <button class="btn-primary px-8 py-4 rounded-full font-medium">
                        D√©couvrir les ench√®res
                    </button>
                    <button class="btn-outline px-8 py-4 rounded-full font-medium">
                        Notre projet
                    </button>
                </div>
            </div>
        </div>

        <!-- Stats -->
        <div class="mt-12 sm:mt-24 sm:pb-12 lg:absolute lg:bottom-0 lg:left-0 lg:right-0 lg:mb-12">
            <div class="container mx-auto px-4">
                <div class="stat-card rounded-2xl p-4 sm:p-8">
                    <div class="grid grid-cols-2 sm:grid-cols-4 gap-4 sm:gap-8">
                        <div class="text-center">
                            <p class="text-3xl font-bold golden-text">{{ totalRaised }}‚Ç¨</p>
                            <p class="mt-2 font-medium text-[#234B6E]">R√©colt√©s</p>
                        </div>
                        <div class="text-center">
                            <p class="text-3xl font-bold golden-text">{{ nbCelebrity }}</p>
                            <p class="mt-2 font-medium text-[#234B6E]">C√©l√©brit√©s</p>
                        </div>
                        <div class="text-center">
                            <p class="text-3xl font-bold golden-text">
                                {% if percentage < 1 %}
                                    {{ percentage|round(2) }} %
                                {% else %}
                                    {{ percentage|round(1) }} %
                                {% endif %}
                            </p>
                            <p class="mt-2 font-medium text-[#234B6E]">Objectif</p>
                        </div>
                        <div class="text-center">
                            <p class="text-3xl font-bold golden-text">100%</p>
                            <p class="mt-2 font-medium text-[#234B6E]">Revers√©s</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Filtres et Recherche -->
{#    <section class="py-12 bg-white">#}
{#        <div class="container mx-auto px-4">#}
{#            <div class="white-card p-6 rounded-xl">#}
{#                <form class="grid md:grid-cols-4 gap-6">#}
{#                    <div>#}
{#                        <label for="category" class="block text-sm font-medium text-[#234B6E] mb-2">Cat√©gorie</label>#}
{#                        <select id="category" name="category" class="w-full px-4 py-2 rounded-xl border border-[#E8C98B] text-[#1D365B] focus:outline-none focus:ring-2 focus:ring-[#D4B054]">#}
{#                            <option value="">Toutes les cat√©gories</option>#}
{#                            {% for profession in professions %}#}
{#                                <option value="{{ profession.id }}">{{ profession.name }}</option>#}
{#                            {% endfor %}#}
{#                        </select>#}
{#                    </div>#}
{#                    <div>#}
{#                        <label for="price" class="block text-sm font-medium text-[#234B6E] mb-2">Prix</label>#}
{#                        <select id="price" name="price" class="w-full px-4 py-2 rounded-xl border border-[#E8C98B] text-[#1D365B] focus:outline-none focus:ring-2 focus:ring-[#D4B054]">#}
{#                            <option value="">Tous les prix</option>#}
{#                            <option value="asc">Prix croissant</option>#}
{#                            <option value="desc">Prix d√©croissant</option>#}
{#                        </select>#}
{#                    </div>#}
{#                    <div>#}
{#                        <label for="status" class="block text-sm font-medium text-[#234B6E] mb-2">Statut</label>#}
{#                        <select id="status" name="status" class="w-full px-4 py-2 rounded-xl border border-[#E8C98B] text-[#1D365B] focus:outline-none focus:ring-2 focus:ring-[#D4B054]">#}
{#                            <option value="">Tous les statuts</option>#}
{#                            <option value="active">En cours</option>#}
{#                            <option value="coming">√Ä venir</option>#}
{#                            <option value="ended">Termin√©es</option>#}
{#                        </select>#}
{#                    </div>#}
{#                    <div>#}
{#                        <label for="search" class="block text-sm font-medium text-[#234B6E] mb-2">Rechercher</label>#}
{#                        <div class="relative">#}
{#                            <input type="search" id="search" name="q"#}
{#                                   class="w-full pl-10 pr-4 py-2 rounded-xl border border-[#E8C98B] text-[#1D365B] focus:outline-none focus:ring-2 focus:ring-[#D4B054]"#}
{#                                   placeholder="Rechercher une ench√®re...">#}
{#                            <svg class="w-5 h-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-[#D4B054]" fill="none" stroke="currentColor" viewBox="0 0 24 24">#}
{#                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>#}
{#                            </svg>#}
{#                        </div>#}
{#                    </div>#}
{#                    {% if redirect is defined and redirect is not null %}#}
{#                        <input type="hidden" name="_target_path" value="{{ redirect }}">#}
{#                    {% endif %}#}
{#                </form>#}
{#            </div>#}
{#        </div>#}
{#    </section>#}

    <!-- Liste des ench√®res -->
    <section class="py-12 bg-gray-50">
        <h2 class="text-5xl font-bold mb-8 text-[#1D365B] text-center">Les ench√®res</h2>
        <div class="container mx-auto px-4">
            {# Ench√®res actives #}
            {% if groupedAuctions.active|length > 0 %}
                <div class="mb-12">
                    <h2 class="text-2xl font-bold mb-8 text-[#1D365B]">
                        <span class="golden-text">‚ö°</span> Ench√®res en cours
                    </h2>
                    <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
                        {% for auction in groupedAuctions.active %}
                            {% include 'auction/_auction_card.html.twig' with {'auction': auction} %}
                        {% endfor %}
                    </div>
                </div>
            {% endif %}

            {# Ench√®res √† venir #}
            {% if groupedAuctions.upcoming|length > 0 %}
                <div class="mb-12">
                    <h2 class="text-2xl font-bold mb-8 text-[#1D365B]">
                        <span class="golden-text">üìÖ</span> Ench√®res √† venir
                    </h2>
                    <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
                        {% for auction in groupedAuctions.upcoming %}
                            {% include 'auction/_auction_card.html.twig' with {'auction': auction} %}
                        {% endfor %}
                    </div>
                </div>
            {% endif %}

            {# Ench√®res termin√©es #}
            {% if groupedAuctions.finished|length > 0 %}
                <div>
                    <h2 class="text-2xl font-bold mb-8 text-[#1D365B]">
                        <span class="golden-text">üèÅ</span> Ench√®res termin√©es
                    </h2>
                    <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
                        {% for auction in groupedAuctions.finished %}
                            {% include 'auction/_auction_card.html.twig' with {'auction': auction} %}
                        {% endfor %}
                    </div>
                </div>
            {% endif %}

            <!-- Pagination -->
            {% if auctions.haveToPaginate is defined and auctions.haveToPaginate %}
                <div class="mt-12 flex justify-center">
                    {{ knp_pagination_render(auctions, '@KnpPaginator/Pagination/tailwindcss_pagination.html.twig') }}
                </div>
            {% endif %}
        </div>
    </section>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        function updateAuctionDisplay(auctionId, data) {
            const bidElement = document.querySelector(`[data-bid-amount="${auctionId}"]`);
            if (bidElement && data.auctionTotal) {
                const amount = parseFloat(data.auctionTotal);
                bidElement.textContent = `${amount.toLocaleString('fr-FR', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                })} ‚Ç¨`;
            }

            if (data.newStatus) {
                const auctionElement = document.querySelector(`[data-auction-id="${auctionId}"]`);
                const statusBadge = auctionElement.querySelector('.status-badge');
                const participateButton = auctionElement.querySelector('a.btn-primary');
                const upcomingMessage = auctionElement.querySelector('.upcoming-message');
                const finishedMessage = auctionElement.querySelector('.finished-message');
                const videoPresentation = auctionElement.querySelector('.video-presentation');
                const videoThanks = auctionElement.querySelector('.video-thanks');

                if (statusBadge) {
                    statusBadge.textContent = data.newStatus;
                }

                if (participateButton) {
                    participateButton.style.display = data.newStatus === 'active' ? 'block' : 'none';
                }
                if (upcomingMessage) {
                    upcomingMessage.style.display = data.newStatus === 'upcoming' ? 'block' : 'none';
                }
                if (finishedMessage) {
                    finishedMessage.style.display = data.newStatus === 'finished' ? 'block' : 'none';
                }

                if (videoPresentation) {
                    videoPresentation.style.display = (data.newStatus === 'upcoming' || data.newStatus === 'active') ? 'block' : 'none';
                }
                if (videoThanks) {
                    videoThanks.style.display = data.newStatus === 'finished' ? 'block' : 'none';
                }
            }
        }

        function initializeMercure() {
            const mercureUrl = "{{ mercureUrl }}";
            if (!mercureUrl) return;

            const auctionElements = document.querySelectorAll('[data-auction-id]');
            auctionElements.forEach(element => {
                const auctionId = element.dataset.auctionId;
                const url = new URL(mercureUrl);
                url.searchParams.append('topic', `auction/${auctionId}`);

                const eventSource = new EventSource(url.toString(), {
                    withCredentials: false
                });

                eventSource.addEventListener('message', (e) => {
                    try {
                        const data = JSON.parse(e.data);
                        updateAuctionDisplay(auctionId, data);
                    } catch (error) {
                        console.error('Erreur parsing:', error);
                    }
                });

                eventSource.onerror = (error) => {
                    console.error('Erreur EventSource:', error);
                };
            });
        }

        function initializeCountdowns() {
            function updateCountdowns() {
                document.querySelectorAll('[data-auction-id]').forEach(auctionCard => {
                    const countdownElement = auctionCard.querySelector('[data-countdown]');
                    if (!countdownElement) return;

                    const startTime = new Date(countdownElement.dataset.startTime).getTime();
                    const endTime = new Date(countdownElement.dataset.countdown).getTime();
                    const now = new Date().getTime();

                    const participateButton = auctionCard.querySelector('a.btn-primary');
                    const upcomingMessage = auctionCard.querySelector('.upcoming-message');
                    const finishedMessage = auctionCard.querySelector('.finished-message');
                    const statusBadge = auctionCard.querySelector('.status-badge');
                    const videoPresentation = auctionCard.querySelector('.video-presentation');
                    const videoThanks = auctionCard.querySelector('.video-thanks');

                    if (now < startTime) {
                        countdownElement.textContent = '√Ä venir';
                        if (participateButton) participateButton.style.display = 'none';
                        if (upcomingMessage) upcomingMessage.style.display = 'block';
                        if (finishedMessage) finishedMessage.style.display = 'none';
                        if (statusBadge) statusBadge.textContent = 'upcoming';
                        if (videoPresentation) videoPresentation.style.display = 'block';
                        if (videoThanks) videoThanks.style.display = 'none';
                    }
                    else if (now >= endTime) {
                        countdownElement.textContent = 'Termin√©e';
                        if (participateButton) participateButton.style.display = 'none';
                        if (upcomingMessage) upcomingMessage.style.display = 'none';
                        if (finishedMessage) finishedMessage.style.display = 'block';
                        if (statusBadge) statusBadge.textContent = 'finished';
                        if (videoPresentation) videoPresentation.style.display = 'none';
                        if (videoThanks) videoThanks.style.display = 'block';
                    }
                    else {
                        const distance = endTime - now;
                        const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                        const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                        const seconds = Math.floor((distance % (1000 * 60)) / 1000);

                        countdownElement.textContent = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                        if (participateButton) participateButton.style.display = 'block';
                        if (upcomingMessage) upcomingMessage.style.display = 'none';
                        if (finishedMessage) finishedMessage.style.display = 'none';
                        if (statusBadge) statusBadge.textContent = 'active';
                        if (videoPresentation) videoPresentation.style.display = 'block';
                        if (videoThanks) videoThanks.style.display = 'none';
                    }
                });
            }

            updateCountdowns();
            setInterval(updateCountdowns, 1000);
        }

        function initializeAuctionStatusChecks() {
            document.querySelectorAll('[data-auction-id]').forEach(auctionElement => {
                const auctionId = auctionElement.dataset.auctionId;

                async function checkStatus() {
                    try {
                        const response = await fetch(`/api/auction/${auctionId}/status`, {
                            method: 'GET',
                            headers: { 'X-Requested-With': 'XMLHttpRequest' }
                        });

                        if (!response.ok) {
                            throw new Error('Erreur lors de la v√©rification du statut');
                        }

                        const result = await response.json();

                        if (result.success && result.currentStatus) {
                            const statusBadge = auctionElement.querySelector('.status-badge');
                            const participateButton = auctionElement.querySelector('a.btn-primary');
                            const upcomingMessage = auctionElement.querySelector('.upcoming-message');
                            const finishedMessage = auctionElement.querySelector('.finished-message');
                            const videoPresentation = auctionElement.querySelector('.video-presentation');
                            const videoThanks = auctionElement.querySelector('.video-thanks');

                            if (statusBadge) {
                                statusBadge.textContent = result.currentStatus;
                            }

                            // Gestion de l'affichage selon le statut
                            if (result.currentStatus === 'finished') {
                                if (participateButton) participateButton.style.display = 'none';
                                if (upcomingMessage) upcomingMessage.style.display = 'none';
                                if (finishedMessage) finishedMessage.style.display = 'block';
                                if (videoPresentation) videoPresentation.style.display = 'none';
                                if (videoThanks) videoThanks.style.display = 'block';
                            } else if (result.currentStatus === 'active') {
                                if (participateButton) participateButton.style.display = 'block';
                                if (upcomingMessage) upcomingMessage.style.display = 'none';
                                if (finishedMessage) finishedMessage.style.display = 'none';
                                if (videoPresentation) videoPresentation.style.display = 'block';
                                if (videoThanks) videoThanks.style.display = 'none';
                            } else if (result.currentStatus === 'upcoming') {
                                if (participateButton) participateButton.style.display = 'none';
                                if (upcomingMessage) upcomingMessage.style.display = 'block';
                                if (finishedMessage) finishedMessage.style.display = 'none';
                                if (videoPresentation) videoPresentation.style.display = 'block';
                                if (videoThanks) videoThanks.style.display = 'none';
                            }
                        }

                        setTimeout(checkStatus, 5000);
                    } catch (error) {
                        console.error('Erreur dans checkStatus:', error);
                        setTimeout(checkStatus, 5000);
                    }
                }

                checkStatus();
            });
        }

        document.addEventListener('DOMContentLoaded', function() {
            initializeCountdowns();
            initializeMercure();
            initializeAuctionStatusChecks();
        });
    </script>
{% endblock %}