{% extends 'base.html.twig' %}

{% block title %}3eos - Enchères caritatives{% endblock %}

{% block body %}
    <div id="auction-config"
         data-mercure-url="{{ mercureUrl }}"
         style="display: none;">
    </div>
    <!-- Hero Section -->
    <section class="lg:min-h-[50vh] pt-32 royal-gradient">
        <div class="container mx-auto px-4">
            <div class="max-w-3xl pt-12">
                <span class="inline-block golden-gradient text-[#1D365B] text-sm font-medium px-6 py-2 rounded-full mb-8">
                    Toutes nos enchères
                </span>
                <h2 class="text-6xl font-bold mb-8 leading-tight text-white">
                    Des rencontres uniques
                    <br>
                    <span class="golden-text">qui font la différence</span>
                </h2>
                <p class="text-xl mb-12 leading-relaxed text-white opacity-90">
                    Enchérissez sur des moments privilégiés avec vos célébrités préférées.
                    100% des fonds récoltés sont reversés pour la création du Loft du Cœur.
                </p>
            </div>
        </div>

        <!-- Stats -->
        <div class="mt-12 sm:mt-24 pb-12">
            <div class="container mx-auto px-4">
                <div class="stat-card rounded-2xl p-4 sm:p-8">
                    <div class="grid grid-cols-2 sm:grid-cols-4 gap-4 sm:gap-8">
                        <div class="text-center">
                            <p class="text-3xl font-bold golden-text">35</p>
                            <p class="mt-2 font-medium text-[#234B6E]">Enchères actives</p>
                        </div>
                        <div class="text-center">
                            <p class="text-3xl font-bold golden-text">157 842€</p>
                            <p class="mt-2 font-medium text-[#234B6E]">Récoltés</p>
                        </div>
                        <div class="text-center">
                            <p class="text-3xl font-bold golden-text">50+</p>
                            <p class="mt-2 font-medium text-[#234B6E]">Célébrités</p>
                        </div>
                        <div class="text-center">
                            <p class="text-3xl font-bold golden-text">100%</p>
                            <p class="mt-2 font-medium text-[#234B6E]">Reversés</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Filtres et Recherche -->
    <section class="py-12 bg-white">
        <div class="container mx-auto px-4">
            <div class="white-card p-6 rounded-xl">
                <form class="grid md:grid-cols-4 gap-6">
                    <div>
                        <label for="category" class="block text-sm font-medium text-[#234B6E] mb-2">Catégorie</label>
                        <select id="category" name="category" class="w-full px-4 py-2 rounded-xl border border-[#E8C98B] text-[#1D365B] focus:outline-none focus:ring-2 focus:ring-[#D4B054]">
                            <option value="">Toutes les catégories</option>
                            {% for profession in professions %}
                                <option value="{{ profession.id }}">{{ profession.name }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    <div>
                        <label for="price" class="block text-sm font-medium text-[#234B6E] mb-2">Prix</label>
                        <select id="price" name="price" class="w-full px-4 py-2 rounded-xl border border-[#E8C98B] text-[#1D365B] focus:outline-none focus:ring-2 focus:ring-[#D4B054]">
                            <option value="">Tous les prix</option>
                            <option value="asc">Prix croissant</option>
                            <option value="desc">Prix décroissant</option>
                        </select>
                    </div>
                    <div>
                        <label for="status" class="block text-sm font-medium text-[#234B6E] mb-2">Statut</label>
                        <select id="status" name="status" class="w-full px-4 py-2 rounded-xl border border-[#E8C98B] text-[#1D365B] focus:outline-none focus:ring-2 focus:ring-[#D4B054]">
                            <option value="">Tous les statuts</option>
                            <option value="active">En cours</option>
                            <option value="coming">À venir</option>
                            <option value="ended">Terminées</option>
                        </select>
                    </div>
                    <div>
                        <label for="search" class="block text-sm font-medium text-[#234B6E] mb-2">Rechercher</label>
                        <div class="relative">
                            <input type="search" id="search" name="q"
                                   class="w-full pl-10 pr-4 py-2 rounded-xl border border-[#E8C98B] text-[#1D365B] focus:outline-none focus:ring-2 focus:ring-[#D4B054]"
                                   placeholder="Rechercher une enchère...">
                            <svg class="w-5 h-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-[#D4B054]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                            </svg>
                        </div>
                    </div>
                    {% if redirect is defined and redirect is not null %}
                        <input type="hidden" name="_target_path" value="{{ redirect }}">
                    {% endif %}
                </form>
            </div>
        </div>
    </section>

    <!-- Liste des enchères -->
    <section class="py-12 bg-gray-50">
        <div class="container mx-auto px-4">
            <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
                {% for auction in auctions %}
                    <div class="white-card rounded-2xl overflow-hidden hover:scale-105 transition-transform duration-300" data-auction-id="{{ auction.id }}">
                        <div class="relative">
{#                            <img src="{{ auction.image }}" alt="{{ auction.name }}" class="w-full h-64 object-cover">#}
                            <div class="absolute top-4 right-4">
                                <span style="background: linear-gradient(135deg, #1D365B 0%, #234B6E 100%)"
                                      class="text-white text-sm font-medium px-4 py-1.5 rounded-full shadow-lg border border-white/20">
                                    {{ auction.status }}
                                </span>
                            </div>
                            <div class="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-[#1D365B] to-transparent">
                                <div class="flex items-center">
{#                                    <img src="{{ auction.celebrity.image }}" alt="{{ auction.celebrity.stageName }}"#}
                                         class="w-12 h-12 rounded-full border-2 border-[#D4B054]">
                                    <div class="ml-3">
                                        <h3 class="text-white font-bold">{{ auction.celebrity.stageName }}</h3>
                                        <p class="golden-text text-sm">{{ auction.celebrity.profession.name }}</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="p-6">
                            <h4 class="text-xl font-bold mb-3 text-[#1D365B]">{{ auction.name }}</h4>
                            <p class="text-[#234B6E] mb-6">{{ auction.description|slice(0, 150) }}...</p>
                            <div class="flex justify-between items-center mb-6">
                                <div>
                                    <p class="text-sm text-[#234B6E]">Enchère actuelle</p>
                                    <p class="text-2xl font-bold golden-text" data-auction-total="{{ auction.id }}" data-bid-amount="{{ auction.id }}">
                                        {% set totalAmount = auction.products|reduce((total, product) =>
                                            total + (product.bids|length > 0 ? product.bids|last.amount : product.initialPrice), 0)
                                        %}
                                        {{ totalAmount|number_format(2, ',', ' ') }} €
                                    </p>
                                </div>
                                <div class="text-right">
                                    <p class="text-sm text-[#234B6E]">Temps restant</p>
                                    <p class="text-xl font-bold text-[#1D365B]"
                                       data-countdown="{{ auction.finishedAt|date('Y-m-d H:i:s') }}"
                                       data-start-time="{{ auction.startedAt|date('Y-m-d H:i:s') }}"
                                       data-auction-id="{{ auction.id }}">
                                        --:--:--
                                    </p>
                                </div>
                            </div>
                            {% if auction.status is same as 'upcoming' %}
                                <div class="mx-auto">
                                    <p class="text-center">ENCHERE A VENIR </p>
                                </div>
                            {% else %}
                                <a id="auctionParticipation" href="{{ is_granted('ROLE_USER')
                                ? path('app_auction_show', {'id': auction.id})
                                : path('app_login', {'redirect': path('app_auction_show', {'id': auction.id})}) }}"
                                   class="block w-full btn-primary text-center py-4 rounded-xl font-medium">
                                    {{ is_granted('ROLE_USER') ? 'Participer à l\'enchère' : 'Se connecter pour enchérir' }}
                                </a>
                            {% endif %}
                        </div>
                    </div>
                {% endfor %}
            </div>

            <!-- Pagination -->
            {% if auctions.haveToPaginate is defined and auctions.haveToPaginate %}
                <div class="mt-12 flex justify-center">
                    {{ knp_pagination_render(auctions, '@KnpPaginator/Pagination/tailwindcss_pagination.html.twig') }}
                </div>
            {% endif %}
        </div>
    </section>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>

        function updateAuctionDisplay(auctionId, data) {
            const bidElement = document.querySelector(`[data-bid-amount="${auctionId}"]`);
            if (bidElement && data.auctionTotal) {
                const amount = parseFloat(data.auctionTotal);
                bidElement.textContent = `${amount.toLocaleString('fr-FR', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                })} €`;
            }
        }

        function initializeMercure() {
            const mercureUrl = "{{ mercureUrl }}";
            if (!mercureUrl) return;

            const auctionElements = document.querySelectorAll('[data-auction-id]');
            auctionElements.forEach(element => {
                const auctionId = element.dataset.auctionId;
                const url = new URL(mercureUrl);
                url.searchParams.append('topic', `auction/${auctionId}`);

                console.log('Abonnement à:', url.toString());

                const eventSource = new EventSource(url.toString(), {
                    withCredentials: false
                });

                eventSource.addEventListener('message', (e) => {
                    console.log('Message reçu:', e.data);
                    try {
                        const data = JSON.parse(e.data);
                        updateAuctionDisplay(auctionId, data); // Appel de la fonction ici
                        if (data.newStatus) {
                            const statusBadge = element.querySelector('.status-badge');
                            const participateButton = element.querySelector('a.btn-primary');

                            if (statusBadge) {
                                statusBadge.textContent = data.newStatus;
                            }

                            if (participateButton) {
                                if (data.newStatus === 'finished') {
                                    participateButton.style.display = 'none';
                                } else if (data.newStatus === 'active') {
                                    participateButton.style.display = 'block';
                                }
                            }
                        }
                    } catch (error) {
                        console.error('Erreur parsing:', error);
                    }
                });

                eventSource.onerror = (error) => {
                    console.error('Erreur EventSource:', error);
                };
            });
        }

        function initializeCountdowns() {
            const countdowns = document.querySelectorAll('[data-countdown]');

            function updateCountdowns() {
                countdowns.forEach(element => {
                    const endTime = new Date(element.dataset.countdown).getTime();
                    const now = new Date().getTime();
                    const distance = endTime - now;

                    if (distance <= 0) {
                        element.textContent = 'Terminée';

                        // Trouver le bouton d'action spécifique à cette enchère
                        const auctionCard = element.closest('[data-auction-id]');
                        if (auctionCard) {
                            const participationButton = auctionCard.querySelector('a.btn-primary');
                            if (participationButton) {
                                participationButton.style.display = "none";
                            }
                        }
                        return;
                    }

                    const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                    const seconds = Math.floor((distance % (1000 * 60)) / 1000);

                    element.textContent = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                });
            }

            updateCountdowns();
            setInterval(updateCountdowns, 1000);
        }

        function initializeAuctionStatusChecks() {
            document.querySelectorAll('[data-auction-id]').forEach(auctionElement => {
                const auctionId = auctionElement.dataset.auctionId;

                async function checkStatus() {
                    try {
                        const response = await fetch(`/api/auction/${auctionId}/status`, {
                            method: 'GET',
                            headers: {'X-Requested-With': 'XMLHttpRequest'}
                        });

                        if (!response.ok) throw new Error('Erreur lors de la vérification du statut');

                        const result = await response.json();
                        const statusBadge = auctionElement.querySelector('.status-badge');
                        const participateButton = auctionElement.querySelector('a.btn-primary');
                        const countdownElement = auctionElement.querySelector('[data-countdown]');

                        // Mettre à jour le status et l'interface
                        if (statusBadge) statusBadge.textContent = result.currentStatus;

                        // Gérer le bouton de participation selon le statut
                        if (participateButton) {
                            if (result.currentStatus === 'finished') {
                                participateButton.style.display = 'none';
                            } else if (result.currentStatus === 'active') {
                                participateButton.style.display = 'block';
                            }
                        }

                        // Planifier la prochaine vérification
                        const now = new Date().getTime();
                        const startTime = new Date(result.startTime).getTime();
                        const endTime = new Date(result.endTime).getTime();

                        let nextCheck = 5000; // 5 secondes par défaut
                        if (Math.abs(now - startTime) < 60000 || Math.abs(now - endTime) < 60000) {
                            nextCheck = 2000; // 2 secondes près des moments critiques
                        }

                        setTimeout(checkStatus, nextCheck);

                    } catch (error) {
                        console.error('Erreur:', error);
                        setTimeout(checkStatus, 5000);
                    }
                }

                // Démarrer la vérification pour cette enchère
                checkStatus();
            });
        }

        document.addEventListener('DOMContentLoaded', function() {
            console.log('Initialisation...');
            initializeCountdowns();
            initializeMercure();
            initializeAuctionStatusChecks();
            document.querySelectorAll('a.btn-primary').forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    window.location.href = this.href;
                });
            });
        });
    </script>
{% endblock %}