name: Symfony

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  symfony-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, gd
          coverage: xdebug

      - uses: actions/checkout@v4

      - name: Copy .env.test
        run: php -r "file_exists('.env.test') || copy('.env.test.dist', '.env.test');"

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: composer-deps-${{ hashFiles('composer.lock') }}
          restore-keys: composer-deps-

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Build Docker images
        run: docker compose -f compose.test.yaml build

      - name: Start containers
        run: docker compose -f compose.test.yaml up -d

      - name: Wait for MySQL
        run: |
          until docker compose -f compose.test.yaml exec db mysqladmin ping --silent; do
            echo "Waiting for MySQL to be ready..."
            sleep 2
          done

      - name: Wait for containers
        timeout-minutes: 2
        run: |
          until docker compose -f compose.test.yaml ps | grep php | grep "healthy"; do
            echo "Waiting for PHP to be ready..."
            sleep 2
          done

      - name: Create Database
        run: |
          docker compose -f compose.test.yaml exec -T php php bin/console doctrine:database:create --env=test --if-not-exists
          docker compose -f compose.test.yaml exec -T php php bin/console doctrine:schema:create --env=test
          docker compose -f compose.test.yaml exec -T php php bin/console doctrine:fixtures:load --env=test --no-interaction

      - name: Run tests
        run: |
          docker compose -f compose.test.yaml exec -T php php -d xdebug.mode=coverage bin/phpunit --testsuite Unit
          docker compose -f compose.test.yaml exec -T php php -d xdebug.mode=coverage bin/phpunit --testsuite Repository

      - name: Show logs on failure
        if: failure()
        run: |
          docker compose -f compose.test.yaml logs php
          docker compose -f compose.test.yaml logs db

      - name: Clean up
        if: always()
        run: docker compose -f compose.test.yaml down -v --remove-orphans
